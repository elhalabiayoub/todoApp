{"ast":null,"code":"var _jsxFileName = \"D:\\\\todo app\\\\client\\\\src\\\\components\\\\Form.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport { addTodo } from \"../redux/actions/rootActions\";\nconst Input = styled.input`\n\tcolor: white;\n\tbackground-image: linear-gradient(to right, #14213d, #023e8a);\n\tborder-radius: 20px;\n\tborder: none;\n\tpadding: 10px 20px;\n\twidth: 60%;\n\tfont-size: 15px;\n\tfont-weight: 500;\n\tfont-family: \"Kanit\", sans-serif;\n\ttransition: background-image 100ms ease;\n\tmargin-right: 20px;\n\n\t&:focus {\n\t\toutline: none;\n\t\tbackground-image: linear-gradient(to right, #023e8a, #14213d);\n\t}\n\t::placeholder {\n\t\tcolor: rgba(255, 255, 255, 0.7);\n\t}\n`;\nconst Button = styled.button`\n\tcursor: pointer;\n\tborder-radius: 20px;\n\tbackground-color: #55a630;\n\twidth: 20%;\n\tpadding: 5px;\n\tcolor: white;\n\tfont-size: 15px;\n\tfont-weight: 500;\n\tfont-family: \"Kanit\", sans-serif;\n\n\tborder: 1px solid black;\n\n\t&:hover {\n\t\tbackground-color: #80b918;\n\t}\n\n\t&:focus {\n\t\toutline: none;\n\t\tborder: 1px solid grey;\n\t}\n`;\nconst Div = styled.div`\n\tmargin-bottom: 30px;\n\n\t& > form {\n\t\tdisplay: flex;\n\t\tflex: center;\n\t\tjustify-content: center;\n\t}\n`;\n\nfunction Form() {\n  const [inputValue, setinputValue] = useState(\"\");\n  const inputRef = useRef();\n  useEffect(() => {\n    inputRef.current.focus();\n  }, []);\n\n  const submitHandler = e => {\n    //const id = Math.random();\n    e.preventDefault();\n    const todo = {\n      text: inputValue,\n      isdone: false\n    };\n\n    if (inputValue.length !== 0) {\n      axios.post(\"/todos\", todo).then(res => {\n        console.log(res.data);\n        setinputValue(\"\");\n      });\n    } else {\n      alert(\"the input is empty\");\n    }\n  };\n\n  const changeHandler = e => {\n    setinputValue(e.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(Div, {\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: inputRef,\n    value: inputValue,\n    onChange: changeHandler,\n    className: \"form__input\",\n    placeholder: \"ajouter une autre action ...  \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    className: \"form__button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, \"Add\")));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    todos: state\n  };\n}\n\nexport default connect(mapStateToProps, {\n  addTodo\n})(Form);","map":{"version":3,"sources":["D:/todo app/client/src/components/Form.js"],"names":["React","useState","useEffect","useRef","axios","styled","connect","addTodo","Input","input","Button","button","Div","div","Form","inputValue","setinputValue","inputRef","current","focus","submitHandler","e","preventDefault","todo","text","isdone","length","post","then","res","console","log","data","alert","changeHandler","target","value","mapStateToProps","state","todos"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,OAAT,QAAwB,8BAAxB;AAEA,MAAMC,KAAK,GAAGH,MAAM,CAACI,KAAM;;;;;;;;;;;;;;;;;;;;CAA3B;AAqBA,MAAMC,MAAM,GAAGL,MAAM,CAACM,MAAO;;;;;;;;;;;;;;;;;;;;;CAA7B;AAuBA,MAAMC,GAAG,GAAGP,MAAM,CAACQ,GAAI;;;;;;;;CAAvB;;AAUA,SAASC,IAAT,GAAgB;AACf,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAMgB,QAAQ,GAAGd,MAAM,EAAvB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACfe,IAAAA,QAAQ,CAACC,OAAT,CAAiBC,KAAjB;AACA,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMC,aAAa,GAAIC,CAAD,IAAO;AAC5B;AACAA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,IAAI,GAAG;AACZC,MAAAA,IAAI,EAAET,UADM;AAEZU,MAAAA,MAAM,EAAE;AAFI,KAAb;;AAKA,QAAIV,UAAU,CAACW,MAAX,KAAsB,CAA1B,EAA6B;AAC5BtB,MAAAA,KAAK,CAACuB,IAAN,CAAW,QAAX,EAAqBJ,IAArB,EAA2BK,IAA3B,CAAiCC,GAAD,IAAS;AACxCC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACAhB,QAAAA,aAAa,CAAC,EAAD,CAAb;AACA,OAHD;AAIA,KALD,MAKO;AACNiB,MAAAA,KAAK,CAAC,oBAAD,CAAL;AACA;AACD,GAhBD;;AAiBA,QAAMC,aAAa,GAAIb,CAAD,IAAO;AAC5BL,IAAAA,aAAa,CAACK,CAAC,CAACc,MAAF,CAASC,KAAV,CAAb;AACA,GAFD;;AAGA,sBACC,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAM,IAAA,QAAQ,EAAEhB,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,KAAD;AACC,IAAA,GAAG,EAAEH,QADN;AAEC,IAAA,KAAK,EAAEF,UAFR;AAGC,IAAA,QAAQ,EAAEmB,aAHX;AAIC,IAAA,SAAS,EAAC,aAJX;AAKC,IAAA,WAAW,EAAC,gCALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eAQC,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WARD,CADD,CADD;AAgBA;;AAED,SAASG,eAAT,CAAyBC,KAAzB,EAAgC;AAC/B,SAAO;AACNC,IAAAA,KAAK,EAAED;AADD,GAAP;AAGA;;AAED,eAAehC,OAAO,CAAC+B,eAAD,EAAkB;AAAE9B,EAAAA;AAAF,CAAlB,CAAP,CAAsCO,IAAtC,CAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport styled from \"styled-components\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { addTodo } from \"../redux/actions/rootActions\";\r\n\r\nconst Input = styled.input`\r\n\tcolor: white;\r\n\tbackground-image: linear-gradient(to right, #14213d, #023e8a);\r\n\tborder-radius: 20px;\r\n\tborder: none;\r\n\tpadding: 10px 20px;\r\n\twidth: 60%;\r\n\tfont-size: 15px;\r\n\tfont-weight: 500;\r\n\tfont-family: \"Kanit\", sans-serif;\r\n\ttransition: background-image 100ms ease;\r\n\tmargin-right: 20px;\r\n\r\n\t&:focus {\r\n\t\toutline: none;\r\n\t\tbackground-image: linear-gradient(to right, #023e8a, #14213d);\r\n\t}\r\n\t::placeholder {\r\n\t\tcolor: rgba(255, 255, 255, 0.7);\r\n\t}\r\n`;\r\nconst Button = styled.button`\r\n\tcursor: pointer;\r\n\tborder-radius: 20px;\r\n\tbackground-color: #55a630;\r\n\twidth: 20%;\r\n\tpadding: 5px;\r\n\tcolor: white;\r\n\tfont-size: 15px;\r\n\tfont-weight: 500;\r\n\tfont-family: \"Kanit\", sans-serif;\r\n\r\n\tborder: 1px solid black;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: #80b918;\r\n\t}\r\n\r\n\t&:focus {\r\n\t\toutline: none;\r\n\t\tborder: 1px solid grey;\r\n\t}\r\n`;\r\n\r\nconst Div = styled.div`\r\n\tmargin-bottom: 30px;\r\n\r\n\t& > form {\r\n\t\tdisplay: flex;\r\n\t\tflex: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n`;\r\n\r\nfunction Form() {\r\n\tconst [inputValue, setinputValue] = useState(\"\");\r\n\tconst inputRef = useRef();\r\n\tuseEffect(() => {\r\n\t\tinputRef.current.focus();\r\n\t}, []);\r\n\r\n\tconst submitHandler = (e) => {\r\n\t\t//const id = Math.random();\r\n\t\te.preventDefault();\r\n\t\tconst todo = {\r\n\t\t\ttext: inputValue,\r\n\t\t\tisdone: false,\r\n\t\t};\r\n\r\n\t\tif (inputValue.length !== 0) {\r\n\t\t\taxios.post(\"/todos\", todo).then((res) => {\r\n\t\t\t\tconsole.log(res.data);\r\n\t\t\t\tsetinputValue(\"\");\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\talert(\"the input is empty\");\r\n\t\t}\r\n\t};\r\n\tconst changeHandler = (e) => {\r\n\t\tsetinputValue(e.target.value);\r\n\t};\r\n\treturn (\r\n\t\t<Div className=\"form\">\r\n\t\t\t<form onSubmit={submitHandler}>\r\n\t\t\t\t<Input\r\n\t\t\t\t\tref={inputRef}\r\n\t\t\t\t\tvalue={inputValue}\r\n\t\t\t\t\tonChange={changeHandler}\r\n\t\t\t\t\tclassName=\"form__input\"\r\n\t\t\t\t\tplaceholder=\"ajouter une autre action ...  \"\r\n\t\t\t\t/>\r\n\t\t\t\t<Button type=\"submit\" className=\"form__button\">\r\n\t\t\t\t\tAdd\r\n\t\t\t\t</Button>\r\n\t\t\t</form>\r\n\t\t</Div>\r\n\t);\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\ttodos: state,\r\n\t};\r\n}\r\n\r\nexport default connect(mapStateToProps, { addTodo })(Form);\r\n"]},"metadata":{},"sourceType":"module"}